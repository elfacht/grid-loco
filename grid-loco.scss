/**
 * Grid Loco
 *
 * A super flexible CSS grid using CSS grid and custom properties.
 * Create your grid in your modules or on the fly in the DOM without
 * stiff classes or mixins. Do what you want, but don't forget the omen!
 *
 * @author Martin Szymanski
 * @link https://github.com/elfacht/grid-loco/
 * @version tbd.
 * @license tbd. but something MIT, I guess.
 *
 * @var {String} --grid-max (Grid max width in px)
 * @var {String} --grid-gap-[<small>|<medium>|<large>|<xlarge>] (Gap between the columns in px)
 * @var {Number} --grid-rows (Amount of grid rows)
 * @var {Number} --grid-cols (Amount of grid cols)
 * @var {String} --grid-align [<stretch>|<center>|<start>|<end>] (Align of all items inside grid)
 * @var {String} --grid-height (Custom grid height)
 * @var {Number} --grid-row-start
 * @var {Number} --grid-row-start-[<small>|<medium>|<large>|<xlarge>]
 * @var {Number} --grid-row-end
 * @var {Number} --grid-row-end-[<small>|<medium>|<large>|<xlarge>]
 * @var {Number} --grid-col-start
 * @var {Number} --grid-col-start-[<small>|<medium>|<large>|<xlarge>]
 * @var {Number} --grid-col-end
 * @var {Number} --grid-col-end-[<small>|<medium>|<large>|<xlarge>]
 * @var {Number} --grid-col-zindex
 */

// ––– Grid defaults –––
// Set default grid max-width
$grid-max-width: 1240px !default;

// Set grid breakpoints
$grid-breakpoints: (
    small: 0,
    medium: 572px,
    large: 768px,
    xlarge: 992px
) !default;

// Set Grid gap widths
$grid-gap: (
    small: 16px,
    medium: 24px,
    large: 40px,
    xlarge: 40px
) !default;

// ––– Grid container –––
.grid {
    // Grid gap sizes per breakpoint
    --grid-gap-default: #{map-get($grid-gap, 'small')};
    --grid-gap-medium: #{map-get($grid-gap, 'medium')};
    --grid-gap-large: #{map-get($grid-gap, 'large')};
    --grid-gap-xlarge: #{map-get($grid-gap, 'xlarge')};

    // Grid gap default variable
    --grid-gap: var(--grid-gap-small, var(--grid-gap-default));

    // Calculate column width by grid max. width,
    // column amount and grid gap
    --grid-col-width: calc(calc(var(--grid-max, #{rem-calc($grid-max-width)}) - calc(var(--grid-cols, 12) * var(--grid-gap, var(--grid-gap-default)))) / var(--grid-cols, 12));

    align-items: var(--grid-align, start);
    display: grid;
    gap: var(--grid-gap);
    grid-template-rows: repeat(var(--grid-rows, 1), var(--grid-height));
    grid-template-columns:  [start]
                                minmax(var(--grid-gap, 0), 1fr)
                            [grid-start]
                                repeat(var(--grid-cols, 12),
                                minmax(0, var(--grid-col-width)))
                            [grid-end]
                                minmax(var(--grid-gap, 0), 1fr)
                            [end];

    @media (min-width: #{map-get($grid-breakpoints, 'medium')}) {
        --grid-gap: var(--grid-gap-medium, var(--grid-gap-small, var(--grid-gap-default)));
    }

    @media (min-width: #{map-get($grid-breakpoints, 'large')}) {
        --grid-gap: var(--grid-gap-large, var(--grid-gap-medium, var(--grid-gap-small, var(--grid-gap-default))));
    }

    @media (min-width: #{map-get($grid-breakpoints, 'xlarge')}) {
        --grid-gap: var(--grid-gap-xlarge, var(--grid-gap-large, var(--grid-gap-medium, var(--grid-gap-small, var(--grid-gap-default)))));
    }
}

// ––– Grid element –––
.grid__el {
    // Element column positions
    --grid-col-start-default: grid-start;
    --grid-col-end-default: grid-end;
    --grid-col-start: var(--grid-col-start-small, var(--grid-col-start-default));
    --grid-col-end: var(--grid-col-end-small, var(--grid-col-end-default));

    // Element row positions
    --grid-row-start-default: 1;
    --grid-row-end-default: auto;
    --grid-row-start: var(--grid-row-start-small, var(--grid-row-start-default));
    --grid-row-end: var(--grid-row-end-small, var(--grid-row-end-default));

    align-self: var(--grid-align-self, stretch);
    grid-column: var(--grid-col-start)/var(--grid-col-end);
    grid-row: var(--grid-row-start)/var(--grid-row-end);
    position: relative;
    z-index: var(--grid-col-zindex);

    @media (min-width: #{map-get($grid-breakpoints, 'medium')}) {
        --grid-col-start: var(--grid-col-start-medium, var(--grid-col-start-small, var(--grid-col-start-default)));
        --grid-col-end: var(--grid-col-end-medium, var(--grid-col-end-small, var(--grid-col-end-default)));
        --grid-row-start: var(--grid-row-start-medium, var(--grid-row-start-small, var(--grid-row-start-default)));
        --grid-row-end: var(--grid-row-end-medium, var(--grid-row-end-small, var(--grid-row-end-default)));
    }

    @media (min-width: #{map-get($grid-breakpoints, 'large')}) {
        --grid-col-start: var(--grid-col-start-large, var(--grid-col-start-medium, var(--grid-col-start-small, var(--grid-col-start-default))));
        --grid-col-end: var(--grid-col-end-large, var(--grid-col-end-medium, var(--grid-col-end-small, var(--grid-col-end-default))));
        --grid-row-start: var(--grid-row-start-large, var(--grid-row-start-medium, var(--grid-row-start-small, var(--grid-row-start-default))));
        --grid-row-end: var(--grid-row-end-large, var(--grid-row-end-medium, var(--grid-row-end-small, var(--grid-row-end-default))));
    }

    @media (min-width: #{map-get($grid-breakpoints, 'xlarge')}) {
        --grid-col-start: var(--grid-col-start-xlarge, var(--grid-col-start-large, var(--grid-col-start-medium, var(--grid-col-start-small, var(--grid-col-start-default)))));
        --grid-col-end: var(--grid-col-end-xlarge, var(--grid-col-end-large, var(--grid-col-end-medium, var(--grid-col-end-small, var(--grid-col-end-default)))));
        --grid-row-start: var(--grid-row-start-xlarge, var(--grid-row-start-large, var(--grid-row-start-medium, var(--grid-row-start-small, var(--grid-row-start-default)))));
        --grid-row-end: var(--grid-row-end-xlarge, var(--grid-row-end-large, var(--grid-row-end-medium, var(--grid-row-end-small, var(--grid-row-end-default)))));
    }
}
